# Docker Compose Override for Local Development
# This file extends the base docker-compose.yml to add local PostgreSQL and development settings
# Run with: docker compose up

version: "3.8"

services:
  # Local PostgreSQL Database - matches production environment
  postgres:
    image: postgres:15-alpine
    container_name: ie-postgres-local
    environment:
      POSTGRES_DB: ie_professors_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ie-network

  # Django Backend Service - Local Development Configuration
  django:
    build:
      context: .
      dockerfile: docker/django.Dockerfile
    container_name: ie-django-local
    environment:
      # Django Configuration
      - DJANGO_SETTINGS_MODULE=ie_professor_management.settings
      - DEBUG=true
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,django
      - SECRET_KEY=local-dev-secret-key-not-for-production
      
      # PostgreSQL Configuration (matches postgres service)
      - DB_HOST=postgres
      - DB_NAME=ie_professors_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
      
      # Python Configuration
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # Static/Media Configuration
      - STATIC_ROOT=/app/static
      - MEDIA_ROOT=/app/media
    ports:
      - "8000:8000"
    volumes:
      - ./ie_professors_database:/app:rw
      - django_static:/app/static
      - django_media:/app/media
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "
    networks:
      - ie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Next.js Frontend Service - Local Development Configuration  
  next:
    build:
      context: .
      dockerfile: docker/next.Dockerfile
    container_name: ie-nextjs-local
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
      - PORT=3000
    ports:
      - "3000:3000"
    volumes:
      - ./ie-professors-frontend:/app:rw
      - /app/node_modules
      - /app/.next
    command: ["npm", "run", "dev"]
    networks:
      - ie-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy - Local Development Configuration
  nginx:
    image: nginx:alpine
    container_name: ie-nginx-local
    ports:
      - "80:80"
    volumes:
      - ./deploy/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      django:
        condition: service_healthy
      next:
        condition: service_healthy
    networks:
      - ie-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Optional: Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: ie-adminer-local
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - ie-network

# Named Volumes for Data Persistence
volumes:
  postgres_data:
    name: ie_postgres_data
  django_static:
    name: ie_django_static  
  django_media:
    name: ie_django_media
  nginx_logs:
    name: ie_nginx_logs

# Custom Network for Container Communication
networks:
  ie-network:
    name: ie-network
    driver: bridge
