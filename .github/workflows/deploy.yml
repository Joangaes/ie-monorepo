name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  EB_APPLICATION_NAME: Ieuniversitydocker
  EB_ENVIRONMENT_NAME: Ieuniversitydocker-env

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Django image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ie-monorepo
        IMAGE_TAG: backend
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./ie_professors_database
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Build and push Next.js image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ie-monorepo
        IMAGE_TAG: frontend
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./ie-professors-frontend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Create deployment package
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
        DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
      run: |
        # Substitute environment variables in docker-compose.yml
        envsubst < docker-compose.yml > docker-compose-deploy.yml
        
        # Create deployment package
        zip -r deploy.zip Dockerrun.aws.json docker-compose-deploy.yml deploy/
        
        # Rename the substituted file back
        mv docker-compose-deploy.yml docker-compose.yml

    - name: Deploy to EB
      uses: einaregilsson/beanstalk-deploy@v22
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: ${{ env.EB_APPLICATION_NAME }}
        environment_name: ${{ env.EB_ENVIRONMENT_NAME }}
        region: ${{ env.AWS_REGION }}
        version_label: ${{ github.sha }}
        deployment_package: deploy.zip
        
    - name: Set EB Environment Variables
      run: |
        aws elasticbeanstalk update-environment \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
          --option-settings \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=AWS_ACCOUNT_ID,Value=${{ secrets.AWS_ACCOUNT_ID }} \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=AWS_DEFAULT_REGION,Value=${{ env.AWS_REGION }} \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=DJANGO_ALLOWED_HOSTS,Value="${{ secrets.DJANGO_ALLOWED_HOSTS }}" \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=DJANGO_SECRET_KEY,Value="${{ secrets.DJANGO_SECRET_KEY }}" \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_NAME,Value="${{ secrets.DB_NAME }}" \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_USER,Value="${{ secrets.DB_USER }}" \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_PASSWORD,Value="${{ secrets.DB_PASSWORD }}" \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_HOST,Value="${{ secrets.DB_HOST }}" \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_PORT,Value="${{ secrets.DB_PORT }}"

    - name: Configure EB Health Check
      run: |
        aws elasticbeanstalk update-environment \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
          --option-settings \
            Namespace=aws:elasticbeanstalk:healthreporting:system,OptionName=SystemType,Value=enhanced \
            Namespace=aws:elasticbeanstalk:application:environment,OptionName=HEALTHCHECK_URL,Value=/health
