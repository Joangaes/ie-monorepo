# Simple CI/CD Pipeline - Direct EB Build
# Uses EB's built-in Docker build (no ECR required)

name: Simple Deploy to AWS EB

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Test stage
  test:
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install backend dependencies
        run: |
          cd ie_professors_database
          # Update lock file if pyproject.toml has changed
          poetry lock
          poetry install

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ie-professors-frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd ie-professors-frontend
          npm install

      - name: Build frontend (test)
        run: |
          cd ie-professors-frontend
          npm run build

  # Deploy stage (only on main branch)
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Install EB CLI
        run: |
          pip install awsebcli

      - name: Verify Dockerfile exists at root
        run: |
          if [ ! -f "Dockerfile" ]; then
            echo "‚ùå ERROR: No Dockerfile found at repository root!"
            echo "EB Docker platform requires Dockerfile or Dockerrun.aws.json at root"
            exit 1
          fi
          echo "‚úÖ Dockerfile found at root"

      - name: Check Environment Status
        run: |
          eb status Ieuniversitydocker-env 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Wait for Environment Ready (if needed)
        run: |
          echo "Checking if environment is ready for deployment..."
          for i in {1..12}; do
            STATUS=$(eb status Ieuniversitydocker-env --verbose | grep "Status:" | awk '{print $2}')
            echo "Environment status: $STATUS (attempt $i/12)"
            if [ "$STATUS" = "Ready" ]; then
              echo "Environment is ready for deployment"
              break
            elif [ "$STATUS" = "Updating" ]; then
              echo "Environment is still updating, waiting 30 seconds..."
              sleep 30
            else
              echo "Environment status: $STATUS - proceeding with deployment"
              break
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Stream EB Events
        run: |
          eb events --follow &
          sleep 5
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set Database Environment Variables from GitHub Secrets
        run: |
          echo "Setting database environment variables for EB deployment..."
          eb setenv \
            DB_HOST="${{ secrets.DB_HOST }}" \
            DB_NAME="${{ secrets.DB_NAME }}" \
            DB_USER="${{ secrets.DB_USER }}" \
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            DB_PORT="${{ secrets.DB_PORT }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy to Elastic Beanstalk with Cache Busting
        run: |
          # Set build args for cache busting
          echo "Deploying with build ID: ${{ github.sha }}"
          eb deploy Ieuniversitydocker-env --timeout 360 --debug
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Fetch Logs on Failure
        if: failure()
        run: |
          eb logs --all
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Deployment successful to production environment!"
