# ECR-based CI/CD Pipeline for IE Monorepo
# Builds Docker image and pushes to ECR, then deploys via Dockerrun.aws.json

name: ECR Deploy to AWS EB   

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Test stage
  test:
    runs-on: ubuntu-latest     
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install backend dependencies
        run: |
          cd ie_professors_database
          # Update lock file if pyproject.toml has changed
          poetry lock
          poetry install

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ie-professors-frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd ie-professors-frontend
          npm install

      - name: Build frontend (test)
        run: |
          cd ie-professors-frontend
          npm run build

  # Build and Deploy stage (only on main branch)
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ie-monorepo --region eu-north-1 || \
          aws ecr create-repository --repository-name ie-monorepo --region eu-north-1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ie-monorepo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker buildx build \
            --platform linux/amd64 \
            --push \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            .
          echo "Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Get AWS Account ID
        id: account-id
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Prepare Dockerrun.aws.json for deployment
        env:
          ACCOUNT_ID: ${{ steps.account-id.outputs.ACCOUNT_ID }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Replace placeholders in Dockerrun.aws.json
          sed -i "s/<ACCOUNT_ID>/$ACCOUNT_ID/g" Dockerrun.aws.json
          sed -i "s/<GIT_SHA>/$IMAGE_TAG/g" Dockerrun.aws.json
          echo "Updated Dockerrun.aws.json:"
          cat Dockerrun.aws.json

      - name: Install EB CLI
        run: |
          pip install awsebcli

      - name: Check Environment Status
        run: |
          eb status Ieuniversitydocker-env 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Wait for Environment Ready (if needed)
        run: |
          echo "Checking if environment is ready for deployment..."
          for i in {1..12}; do
            STATUS=$(eb status Ieuniversitydocker-env --verbose | grep "Status:" | awk '{print $2}')
            echo "Environment status: $STATUS (attempt $i/12)"
            if [ "$STATUS" = "Ready" ]; then
              echo "Environment is ready for deployment"
              break
            elif [ "$STATUS" = "Updating" ]; then
              echo "Environment is still updating, waiting 30 seconds..."
              sleep 30
            else
              echo "Environment status: $STATUS - proceeding with deployment"
              break
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Stream EB Events
        run: |
          eb events --follow &
          sleep 5
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set Database Environment Variables from GitHub Secrets
        run: |
          echo "Setting database environment variables for EB deployment..."
          eb setenv \
            DB_HOST="${{ secrets.DB_HOST }}" \
            DB_NAME="${{ secrets.DB_NAME }}" \
            DB_USER="${{ secrets.DB_USER }}" \
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            DB_PORT="${{ secrets.DB_PORT }}" \
            USE_POSTGRES="true"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create EB Application Version
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Create application version with the updated Dockerrun.aws.json
          eb appversion --staged --timeout 20
          echo "‚úÖ Application version created with ECR image: $IMAGE_TAG"

      - name: Deploy to Elastic Beanstalk
        run: |
          echo "üöÄ Deploying ECR image to EB environment..."
          eb deploy --staged --timeout 20
          echo "‚úÖ Deployment initiated successfully"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Wait for deployment completion
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          for i in {1..20}; do
            STATUS=$(eb status Ieuniversitydocker-env --verbose | grep "Status:" | awk '{print $2}')
            HEALTH=$(eb status Ieuniversitydocker-env --verbose | grep "Health:" | awk '{print $2}')
            echo "Environment status: $STATUS, Health: $HEALTH (check $i/20)"
            
            if [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Ok" ]; then
              echo "‚úÖ Deployment completed successfully!"
              break
            elif [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Severe" ]; then
              echo "‚ùå Deployment failed - Health is Severe"
              eb health --refresh
              exit 1
            fi
            
            sleep 30
          done

      - name: Verify deployment endpoints
        run: |
          # Get the environment URL
          EB_URL=$(eb status Ieuniversitydocker-env | grep "CNAME:" | awk '{print $2}')
          echo "Testing deployment at: http://$EB_URL"
          
          # Test health endpoint
          echo "Testing /healthz endpoint..."
          curl -f "http://$EB_URL/healthz" || echo "Health check failed"
          
          # Test Next.js frontend
          echo "Testing Next.js frontend..."
          curl -f "http://$EB_URL/" || echo "Frontend test failed"
          
          # Test Django admin
          echo "Testing Django admin..."
          curl -f "http://$EB_URL/admin/" || echo "Admin test failed"

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ ECR-based deployment successful to production environment!"
          echo "üê≥ Docker image: ${{ steps.login-ecr.outputs.registry }}/ie-monorepo:${{ github.sha }}"
