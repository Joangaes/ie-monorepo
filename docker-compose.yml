# Production-ready Docker Compose for AWS Elastic Beanstalk
# Single nginx entrypoint on port 80, proxies to frontend/backend services
# Compatible with EB multi-container Docker (no profiles or buildx features)

services:
  # Nginx reverse proxy - single public entrypoint
  nginx:
    build:
      context: .
      dockerfile: infra/nginx.Dockerfile
    image: nginx-service
    ports:
      - "80:80"
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: awslogs
      options:
        awslogs-group: "${EB_ENV_NAME:-env}-nginx"
        awslogs-region: "${AWS_DEFAULT_REGION:-us-east-1}"
        awslogs-stream-prefix: "${EB_LOG_STREAM_PREFIX:-app}"
        # Required IAM role permissions: logs:CreateLogGroup, logs:CreateLogStream, logs:PutLogEvents

  # Django backend service
  backend:
    build:
      context: ./ie_professors_database
      dockerfile: Dockerfile
    image: backend-service
    # Alternative for ECR pre-built images (uncomment and update):
    # image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_BACKEND_REPO}:${IMAGE_TAG:-latest}
    environment:
      # Database connection
      DATABASE_URL: ${DATABASE_URL}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT:-5432}
      
      # Django security
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: "false"
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      
      # Static/media files
      DJANGO_COLLECTSTATIC: ${DJANGO_COLLECTSTATIC:-1}
      STATIC_ROOT: "/vol/static"
      MEDIA_ROOT: "/vol/media"
      
      # Email configuration
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      
      # Gunicorn settings
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-3}
      GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT:-60}
    volumes:
      - static_data:/vol/static
      - media_data:/vol/media
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/login/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    logging:
      driver: awslogs
      options:
        awslogs-group: "${EB_ENV_NAME:-env}-backend"
        awslogs-region: "${AWS_DEFAULT_REGION:-us-east-1}"
        awslogs-stream-prefix: "${EB_LOG_STREAM_PREFIX:-app}"

  # Next.js frontend service
  frontend:
    build:
      context: ./ie-professors-frontend
      dockerfile: Dockerfile
    image: frontend-service
    # Alternative for ECR pre-built images (uncomment and update):
    # image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_FRONTEND_REPO}:${IMAGE_TAG:-latest}
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      # Frontend calls backend through nginx proxy (same origin)
      NEXT_PUBLIC_PROFESSORS_API_SERVICE: ""
      PROFESSORS_API_SERVICE: "http://backend:8000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: awslogs
      options:
        awslogs-group: "${EB_ENV_NAME:-env}-frontend"
        awslogs-region: "${AWS_DEFAULT_REGION:-us-east-1}"
        awslogs-stream-prefix: "${EB_LOG_STREAM_PREFIX:-app}"

volumes:
  static_data:
  media_data: