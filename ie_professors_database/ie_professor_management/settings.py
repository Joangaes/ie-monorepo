"""
Django settings for ie_professor_management project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

def env_list(name: str, default: str = "") -> list[str]:
    v = os.getenv(name, default)
    return [x.strip() for x in v.split(",") if x.strip()]


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv()



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-ksi3jyeswauq*u(*-5en&&egkq^07b(@!h9-6)z*mz(_k*tw9v")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() == "true"

ALLOWED_HOSTS = env_list(
    "DJANGO_ALLOWED_HOSTS",
    "localhost,127.0.0.1,.elasticbeanstalk.com",
)

if os.getenv("DJANGO_ALLOW_ALL_HOSTS", "0") == "1":
    ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "unfold.contrib.import_export",  # optional, if django-import-export package is used
    "unfold.contrib.guardian",  # optional, if django-guardian package is used
    "unfold.contrib.simple_history",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "university",
    "api",
    "django_extensions",
    'simple_history',
    "import_export",
    "timestamps",
    'rest_framework',
    "rest_framework_simplejwt",
    'django_filters',
    'corsheaders',
]

MIDDLEWARE = [
    'ie_professor_management.middleware.DebugHostMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'ie_professor_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ie_professor_management.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use SQLite as fallback if PostgreSQL is not configured
DB_HOST = os.getenv("DB_HOST")
if DB_HOST and DB_HOST.strip():
    # PostgreSQL configuration
    print(f"Using PostgreSQL database at {DB_HOST}")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv("DB_NAME", "ie_professors_db"),       
            'USER': os.getenv("DB_USER", "postgres"),           
            'PASSWORD': os.getenv("DB_PASSWORD", "password"),   
            'HOST': DB_HOST,
            'PORT': os.getenv("DB_PORT", "5432"),
            'OPTIONS': {
                'connect_timeout': 10,
            },
        }
    }
else:
    # SQLite fallback for testing/development
    print("Using SQLite database (fallback)")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("EMAIL_HOST_USER")

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 50,
    "DEFAULT_AUTHENTICATION_CLASSES": [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
}

from datetime import timedelta
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "ROTATE_REFRESH_TOKENS": True,
}


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'
LANGUAGES = (
    ('en', 'English'),
    ('es', 'Spanish'),
)

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Madrid'

USE_I18N = True

USE_TZ = True

# Locale paths for translation files
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]


CSRF_TRUSTED_ORIGINS = env_list(
    "DJANGO_CSRF_TRUSTED_ORIGINS",
    "https://*.elasticbeanstalk.com,http://*.elasticbeanstalk.com",
)

# CORS configuration
CORS_ALLOWED_ORIGINS = [o.strip() for o in os.getenv("CORS_ALLOWED_ORIGINS", "http://localhost:3000,http://127.0.0.1:3000").split(",") if o.strip()]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.getenv("STATIC_ROOT", "/vol/static")
MEDIA_URL = "/media/"
MEDIA_ROOT = os.getenv("MEDIA_ROOT", "/vol/media")

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _

UNFOLD = {
    "SITE_TITLE": _("IE University Admin"),
    "SITE_HEADER": _("IE University"),
    "SITE_SUBHEADER": _("Academic Management"),
    "SITE_DROPDOWN": [
        {
            "icon": "school",
            "title": _("IE University Website"),
            "link": "https://www.ie.edu/university/",
        },
    ],
    "SITE_URL": "/admin/university/coursedelivery/?active_status=active",
    "SITE_SYMBOL": "school",
    "SHOW_HISTORY": True,
    "SHOW_VIEW_ON_SITE": True,
    "SHOW_BACK_BUTTON": True,
    "THEME": "light",  # IE brand usually uses light backgrounds, but you can toggle to 'dark' if you want
    "BORDER_RADIUS": "6px",
    "HEADER": {
        "show_language_switcher": True,
        "language_switcher_template": "unfold/helpers/language_switch.html",
    },
    "COLORS": {
        "base": {
            "50": "245, 245, 245",  # Light Gray background
            "100": "230, 230, 230",
            "200": "200, 200, 200",
            "300": "160, 160, 160",
            "400": "100, 100, 100",
            "500": "77, 77, 77",  # IE Gray (medium)
            "600": "55, 55, 55",
            "700": "33, 33, 33",
            "800": "20, 20, 20",
            "900": "10, 10, 10",
            "950": "5, 5, 5",
        },
        "primary": {
            "50": "229, 241, 255",
            "100": "204, 229, 255",
            "200": "153, 204, 255",
            "300": "102, 178, 255",
            "400": "51, 153, 255",
            "500": "0, 120, 215",  # IE Light Blue main
            "600": "0, 90, 160",   # IE Blue darkened
            "700": "0, 60, 120",
            "800": "0, 45, 90",
            "900": "0, 30, 60",
            "950": "0, 15, 30",
        },
        "accent": {
            "500": "255, 111, 0",  # IE Orange accent
        },
        "font": {
            "subtle-light": "var(--color-base-500)",  
            "subtle-dark": "var(--color-base-400)",  
            "default-light": "var(--color-base-700)",  
            "default-dark": "var(--color-base-300)",  
            "important-light": "var(--color-primary-600)",  
            "important-dark": "var(--color-primary-300)",  
        },
    },
   
    "SIDEBAR" :{
    "show_search": True,
    "show_all_applications": True,
    "navigation": [
        {
            "title": _("Professor Information"),
            "separator": True,
            "collapsible": False,
            "items": [
                {
                    "title": _("Professors"),
                    "icon": "person",
                    "link": reverse_lazy("admin:university_professor_changelist"),
                    "permission": lambda request: request.user.has_perm("university.view_professor"),
                },
            ],
        },
        {
            "title": _("Programs"),
            "separator": True,
            "collapsible": False,
            "items": [
                {
                    "title": _("Programs"),
                    "icon": "school",
                    "link": reverse_lazy("admin:university_program_changelist"),
                    "permission": lambda request: request.user.has_perm("university.view_program"),
                },
                {
                    "title": _("Courses"),
                    "icon": "menu_book",
                    "link": reverse_lazy("admin:university_course_changelist"),
                    "permission": lambda request: request.user.has_perm("university.view_course"),
                },
            ],
        },
        {
            "title": _("Terms"),
            "separator": True,
            "collapsible": False,
            "items": [
                {
                    "title": _("Terms"),
                    "icon": "event",
                    "link": reverse_lazy("admin:university_intake_changelist"),
                    "permission": lambda request: request.user.has_perm("university.view_intake"),
                },
                {
                    "title": _("Intake"),
                    "icon": "event",
                    "link": reverse_lazy("admin:university_joinedacademicyear_changelist"),
                    "permission": lambda request: request.user.has_perm("university.view_joinedacademicyear"),
                },
                {
                    "title": _("Current Intakes"),
                    "icon": "calendar_today",
                    "link": reverse_lazy("admin:university_intake_current_intake_landing"),
                    "permission": lambda request: request.user.has_perm("university.view_intake"),
                },
                {
                    "title": _("Course Deliveries"),
                    "icon": "date_range",
                    "link": "/admin/university/coursedelivery/?active_status=active",
                    "permission": lambda request: request.user.has_perm("university.view_coursedelivery"),
                },
                {
                    "title": _("Sections"),
                    "icon": "view_list",
                    "link": reverse_lazy("admin:university_section_changelist"),
                    "permission": lambda request: request.user.has_perm("university.view_section"),
                },
            ],
        },
        {
            "title": _("User Management"),
            "separator": True,
            "collapsible": False,
            "items": [
                {
                    "title": _("Users"),
                    "icon": "people",
                    "link": reverse_lazy("admin:auth_user_changelist"),
                    "permission": lambda request: True,
                },
                {
                    "title": _("Groups"),
                    "icon": "group",
                    "link": reverse_lazy("admin:auth_group_changelist"),
                    "permission": lambda request: True,
                },
            ],
        },
    ],
}
}
