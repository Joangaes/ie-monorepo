name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      POETRY_VERSION: 2.1.3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install pipx
      run: python3 -m pip install --user pipx
    - name: Install Poetry with pipx
      run: |
        python3 -m pipx install poetry==${{ env.POETRY_VERSION }}
        echo "${{ env.HOME }}/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: poetry install

  deploy:
    runs-on: ubuntu-latest
    needs: build

    env:
      POETRY_VERSION: 2.1.3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install pipx
      run: python3 -m pip install --user pipx
    - name: Install Poetry with pipx
      run: |
        python3 -m pipx install poetry==${{ env.POETRY_VERSION }}
        echo "${{ env.HOME }}/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: poetry install

    - name: Create .env file
      run: |
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
        echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
        

    - name: Add poetry export
      run: poetry self add poetry-plugin-export

    - name: Create requirements.txt
      run: poetry export -f requirements.txt --output requirements.txt

    - name: Install AWS Elastic Beanstalk CLI
      run: pip install awsebcli==3.20.10

    - name: Deploy to Elastic Beanstalk
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: eu-north-1
        APPLICATION_NAME: ie_professors
        ENVIRONMENT_NAME: Ieprofessors-env
      run: |
        eb init -p python-3.11 $APPLICATION_NAME --region $AWS_REGION
        eb use $ENVIRONMENT_NAME
        eb deploy --staged

